		    +---------------------------+
		    |             OS            |
		    | PROJECT 3: VIRTUAL MEMORY |
		    |      DESIGN DOCUMENT      |
		    +---------------------------+

---- GROUP - 17 ----

>> Fill in the names, email addresses and matriculation numbers of your group members.

Shreyshi Singh <shreyshi.s@iitgn.ac.in> 19110032
Xhitij Choudhary <xhitij.cm@iitgn.ac.in> 19110044
Bhoomika Mandloi <bhoomika.m@iitgn.ac.in> 19110076

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

References - 
https://www.youtube.com/watch?v=M1FJvXgZhdo


			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.
Hash table indexed by the page is frame table and we will access hash table by check for NULL.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?
During system calls, By accessing the frame with the user's vaddr, the issue is avoided.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?
Processes synchronize on frame_hash_lock(lock of the frame table).

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

By using hash table, we have O(1) complexity. We hardly never need to access the table in any other manner than indexing by page, and even if we did, choosing a different data structure wouldn't have made a difference. We may distinguish between pages in the page table by defining the less function as a case split. This establishes a partial order, but when elements are incomparable, we just might return true.

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.
It's a basic clock algorithm implementation. The frame table is reviewed circularly, and the frame to evict is determined according to the method by leveraging the "accessed" bit in the pagedir.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?
The page of the victim is swapped to disk or, in the instance that the page is of a memory mapped file, written to file.
The page's status in the supplemental page table is updated accordingly (LAZY SWAPPED or MMF UNLOADED, respectively), and the entry of the page in pagedir is removed.
Finally, the victim's frame table entry's "owner" field is altered from Q to P.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.
The stack is extended if the invalid virtual address does not exceed the stack pointer by more than 32 bytes when given a valid address (PHYS BASE boundaries verified). We also look for stack overflows (MAX STACK ).

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?
By stating that two evictions cannot take place at the same time.
The cases of page accessed and page fault remain. We only have to deal with concurrent page faults and evictions since the address is removed from the pagedir while swapping. The previously described locks are used to overcome this problem.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?
A process must get the Frame lock and the Swap lock in order to perform an eviction. Because of this, Q is unable to evict the page while P holds the Frame lock.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?
Some checks are done while processing syscalls to ensure that the provided address is legitimate. The core of this is found in thread.c, where the is valid address of thread function is executed (). This function has been improved to take into account swapped and lazily loaded pages as well. The code next validates that the given address is present in the supplemental page table after the usual checks. If that's the case, and the write permissions are fine, then it will allow the kernel to page fault.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.
As previously stated in B5, our system is rather granular. (num thread + 3) various locks are used to synchronise the VM. We chose this approach to avoid a Big Kernel Lock scenario, in which all VM processing is done sequentially. This raises a variety of issues, the solutions to which are detailed in the previous answers.
Parallelism is the explanation behind this decision. For example, locking the frame table makes little sense if all we're doing is setting up lazy loading for a file.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.
MM files, like lazy loaded pages, are stored in the supplemental page table. The page's type and presence in RAM are both stored in the status enum. When mmapping, an entry (size/PGSIZE) is created for each page of the file and assigned to the UNLOADED status. During a page fault, actual reading is performed.
The field "file info" in the entry is non-NULL if the page is for a memory mapped file. If the page is for a memory mapped file, it is written to disk rather than the swap partition when swapping.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.
Every time a page is mapped in pt suppl handle mmap in page.c, it would be enough to check if there is already a page of the process mapped at that address.  Mmap fails if the mappings overlap.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.
The only change  is a case split in page out evicted frame in frame.c. A normal frame or a frame from a memory mapped file can be used. The underlying infrastructure is shared for the most part. This is also due to the fact that both sorts of information are stored in a per-thread table. The status field can be used to distinguish between the two (where necessary).

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?
It was very difficult according to our group.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
Understanding Pintos : Terminologies, how virtual memory works, distinction between user and kernel virtual memory, and managing the supplement page table.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?
None of the guidance was misleading.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?
TAs were helpful whenever we asked for help.

>> Any other comments?